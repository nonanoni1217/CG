#include<iostream.h>
#include<graphics.h>
#include<conio.h>
#include<dos.h>
#include<math.h>

#define pi 3.14285714

class projections
{
      double vertices[8][4];               //matrix contains vertices of the triangle
      double t_matrix[4][4];             //transformation matrix
      double result[8][4];

      public:
      projections(){};

      void get_vertices();
      void display_cube();

      void multiplication();
      void copyback();

     
      void axonometric(double angle_x,double angle_y);
      
};


void projections::get_vertices()
{
     for(int i=0;i<8;i++)
     {
	 cout<<"\nEnter vertex "<<i+1<<"...";
	 cout<<"\nx : ";
	 cin>>vertices[i][0];
	 result[i][0]=vertices[i][0];

	 cout<<"y : ";
	 cin>>vertices[i][1];
	 result[i][1]=vertices[i][1];

	 cout<<"z : ";
	 cin>>vertices[i][2];
	 result[i][2]=vertices[i][2];

	 vertices[i][3]=result[i][3]=1;
     }
}


void projections::display_cube()
{
     int i=0;

     for(i=0;i<3;i++)
     line(result[i][0],result[i][1],result[i+1][0],result[i+1][1]);
     line(result[i][0],result[i][1],result[0][0],result[0][1]);

     for(i=4;i<7;i++)
     line(result[i][0],result[i][1],result[i+1][0],result[i+1][1]);
     line(result[i][0],result[i][1],result[4][0],result[4][1]);

     for(i=0;i<4;i++)
     line(result[i][0],result[i][1],result[i+4][0],result[i+4][1]);
}


void projections::copyback()
{
     int i=0,j=0;

     for(i=0;i<8;i++)
     for(j=0;j<4;j++)
     result[i][j]=vertices[i][j];
}


void projections::multiplication()
{
     double r[8][4];
     int i=0,j=0,k=0;

	 for(i=0;i<8;i++)
	 {
	     for(j=0;j<4;j++)
	     {
		 r[i][j]=0;
		 for(k=0;k<4;k++)
		 r[i][j]+=result[i][k]*t_matrix[k][j];
	     }
	 }

     for(i=0;i<8;i++)              //Copying back the result
     for(j=0;j<4;j++)
     result[i][j]=r[i][j];
}


//AXONOMETRIC PROJECTION..................................................................
void projections::axonometric(double angle_x,double angle_y)
{
     angle_x=((pi/180)*angle_x);                //tan inverse(slope)=angle
     angle_y=((pi/180)*angle_y);

     cleardevice();
     clearviewport();
     cout<<"\tAXONOMETRIC PROJECTION...........";

     copyback();

     t_matrix[0][0]=cos(angle_y);              //[T] for parallel projection on plane z=0
     t_matrix[0][1]=(sin(angle_y))*(sin(angle_x));
     t_matrix[0][2]=0;
     t_matrix[0][3]=0;

     t_matrix[1][0]=0;
     t_matrix[1][1]=cos(angle_x);
     t_matrix[1][2]=0;
     t_matrix[1][3]=0;

     t_matrix[2][0]=sin(angle_y);
     t_matrix[2][1]=(-1)*(cos(angle_y)*sin(angle_x));
     t_matrix[2][2]=0;
     t_matrix[2][3]=0;

     t_matrix[3][0]=0;
     t_matrix[3][1]=0;
     t_matrix[3][2]=0;
     t_matrix[3][3]=1;

	      multiplication();

    setcolor(GREEN);
    display_cube();
    delay(20);
    getch();
}



void main()
{
    clrscr();
    int gd=DETECT,gm;
    projections t1;
   
    double angle_x,angle_y,angle,ratio,ratio1,ratio2,ratio3;

     cout<<"\n\n\t   ........PROJECTIONS OF 3D OBJECTS........\n";
       cout<<"\nEnter the details of a cube(i.e. 3D object).....";
       t1.get_vertices();

	      initgraph(&gd,&gm,"C:\\Turboc3\\BGI");
	     
		    
		     cout<<"\n\nFOR AXONOMETRIC PROJECTION..........";
			    cout<<"\nEnter the angle of rotation about :-";
			    cout<<"\nx-axis : ";
			    cin>>angle_x;
			    cout<<"And, y-axis : ";
			    cin>>angle_y;

			    t1.axonometric(angle_x,angle_y);
			    break;

		    
	      closegraph();

	      
}

//output: (100,200,0) (200,200,0) (200,100,0) (100,100,0) (100,200,100) (200,200,100) (200,100,100) (100,100,100)
